_______NATIVE FUNCTIONS BY EXAMPLE_______


WRITE & NEWLINE:

fn main()
  let string 'Hello World!' # string to print
  write(string) # print string
  new_line()
end

These functions are used to write to the
terminal, they take in data of types char,
string, ptr, or uint.


PTR & SYSCALL:

fn main()
  let NR 1       # write syscall
  let stdout 1   # write to term
  let size 1     # size of string
  let string 'H' # string to print
  let string_ptr ptr(string) # get ptr
  
  syscall(NR stdout string_ptr size) # call
end

The ptr function is used to get the address
of a variable in memory, this can be used
in syscalls as showed here or for features
yet to be implemented.

Syscall allows the user to interact directly
with the OS, right now the langauge is built
for Debian Linux, so this with nasm could
be used to reimplement the language within
itself for another OS. This is because system
call IDs and parameters differ between OS's.

Linux Syscalls can be found here:
  - https://chromium.googlesource.com/chromiumos/docs/+/HEAD/constants/syscalls.md

_______VER 0.0.8_______

ADDRESS FUNCTIONS:
Used to minipulate addresses.
---------DEPRECATED IN FAVOR OF THE FOLLOWING SYNTAX-----------
addr_add(PTR address UINT bytes)              PTR new_address
addr_sub(PTR address UINT bytes)              PTR new_address
addr_get(TYPE type PTR address)               TYPE @address
addr_equ(TYPE type PTR address ANY value)     NONE
---------------------------------------------------------------
new_address address + bytes                   ADD
new_address address - bytes                   SUB
value @TYPE address                           GET
@TYPE address value                           ASSIGN

UTILITY:
General use and syscall wrappers.
sleep(UINT seconds UINT nanoseconds)          NONE
exit(UINT exit_code)                          NONE
error(PTR err_msg UINT msg.len UINT err_code) NONE
cast(TYPE type_to ANY value)                  TYPE casted_value
writeln(...)                                  NONE
open_fd(STRING filename UINT flags UINT mode) UINT fd
close_fd(UINT fd)                             NONE
read(UINT fd PTR buffer UINT len)             NONE
fstats(UINT fd PTR buffer144)                 NONE
asm(STRING LITERAL asm_code)                  NONE


EXPIREMENTAL, DEPRECATED, OR BUGGY:
Either not fully developed or deprecated functions.
array(TYPE type UINT length)                  PTR begining
alloc(UINT bits)                              PTR begining
read_bits(ANY value CONST BUFFER buff)        NONE

CAST TYPE CONVERSIONS AND USES:
BOOL --> CHAR to get 1 or 0
BOOL --> UINT to get 1 byte number or t/f
CHAR --> BOOL to get number from digit
CHAR --> UINT to get number from digit
UINT --> CHAR to get any ascii value
UINT --> BOOL to get 1 byte number

ASM FUNTION SYNATX:
All the assembly is NASM. You can access a variable by doing 
@variable_name. Escape sequences DO work with this function 
and you need to put \n at the end of every line. 
WARNING THE COMPILER DOESN'T REVIEW THIS CODE AT ALL.
USE AT YOUR OWN RISK.