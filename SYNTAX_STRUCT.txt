     _____SYNTAX STRUCT SYNTAX______

NAME PROPERTY:

The name used to index the syntax.


OUT_REG PROPERTY:

The output register in ASM code. When ever
declaring an expression to variable this is
used since the variable needs a way to access
the data it is assigned.


OUT_TYPE PROPERTY:

The type that the output of the expression is.
This is here becuase the inputs may not always
be the same as the inputs.

In the example of adding two UINTs this seems
unnessasary, BUT in an example of something such
as a comparison of two UINTs you start to see
the value of this. In that case you would need
two UINTs as input and a BOOL as the output.


STRUCTURE PROPERTY:

Write the types and tokens that you expect.
These can include symbols by their token names.

Here is an example.
Let's say you want to add the syntax to add
two intergers. You could think of this as
the expression A + B.

Well in this property you want to write the
types of these things. They are both unsigned
intergers (UINT) and the token for the symbol
+ is PLUS.

That mean you would input the following line
for this field:

UINT PLUS UINT


KEY PROPERTY:

This property gives labels to all the types
and tokens that were specified to be used in
the ASM code that is written next.

To continue with the example earlier, remember
how I mentioned that you could think of the
expression as A + B? Well that is what we do
here.

A would refer to the the first UINT, B the
second, and + to the PLUS token.

To continue the example you'd put the
following line in this field:

A + B


OUTPUT PROPERTY:

This property defines the ASM code that you
want to be produced from this syntax. But here
we run into an issue, we can't acess the
values that the user inputted. Well that is
remedied with the Key Property.

This field is a vector like the others, big
whoop right? Well the "special syntax" to
access the keys is to put them as a seperate
string within the ASM code.

To finish the example of adding two unsigned
intergers I will demostrate how to do that in
this field.

So first we need to think of the ASM code we
would need to write. To add two unsigned ints
in ASM you would move the first one of them to
the EAX register. You would then use the add
operator.

That would look something like this:

mov eax, 34
add eax, 35

And would look like this written in C++:

vector<string> asm_code;
asm_code.push_back("mov eax, 34\n");
asm_code.push_back("add eax, 35\n");


To write this with the keys would look
like this:

vector<string> asm_code;
asm_code.push_back("mov eax, ");
asm_code.push_back("A");
asm_code.push_back("\n");
asm_code.push_back("add eax, ");
asm_code.push_back("B");
asm_code.push_back("\n");

And that's it!